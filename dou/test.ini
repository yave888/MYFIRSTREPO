function sendSlackNotification() {

  // 12日前から現在までの日付範囲を設定
  let fromDate = new Date(); // 現在の日付を取得
  fromDate.setDate(fromDate.getDate() - 12); // 12日前の日付に変更
  let toDate = new Date(); // 現在の日付を取得

  // 日付を"yyyy/MM/dd"の形式にフォーマットして表示
  let fromnewDate = Utilities.formatDate(fromDate, "JST", 'yyyy/MM/dd');
  console.log(fromnewDate)
  let tonewDate = Utilities.formatDate(toDate, "JST", 'yyyy/MM/dd');
  console.log(tonewDate)

  // Gmailのメール検索クエリを作成
  let searchString = 'in:inbox after:' + fromnewDate + ' before:' + tonewDate + ' subject:"エンタープライズサポート　アクティベーション依頼" "ご依頼いただきましたメンバーアカウントのエンタープライズサポートへの有効化手続きが完了いたしました。"';

  let threads = GmailApp.search(searchString);
  console.log(threads)

  // スプレッドシートを取得
  let spreadSheet = SpreadsheetApp.getActiveSpreadsheet();
  const JIRASheet = spreadSheet.getSheetByName("JIRA");
  let mailSheet = spreadSheet.getSheetByName("mail");
  let data = mailSheet.getDataRange().getValues();
  let notifiedSubjects = data.map(function (row) { return row[0]; }); // 通知済みメールの件名を取得

  if (threads.length > 0) {
    // JIRAクエリを設定
    let QUERY = "status not in (クローズ, 解決済み, 完了) AND project = 社内サポート AND text ~ 'AWS初期設定依頼' AND 'Request Type' = '【SKY-OPT】AWS初期設定依頼 (INTERSUP)' AND created >= -12d ORDER   BY created DESC";
    const FIELD = "issuekey";

    // JIRAのチケット情報をシートからクリア
    JIRASheet.clear();

    // JIRAのクエリ結果をスプレッドシートに貼り付ける
    JIRASheet.getRange("A1").setValue('=JIRA("' + QUERY + '","' + FIELD + '")');

    // JIRAのクエリ結果の最終行を取得
    let LastRow = JIRASheet.getLastRow();
    console.log(LastRow); // コンソールログに変更

    if (LastRow > 1) {
      // JIRAのチケット番号（issuekey）を取得
      let temp = JIRASheet.getRange("A2:A" + LastRow).getValues();
      Logger.log(temp); // コンソールログに変更

      let columnAValues = temp.map(function (row) {
        return row[0];
      });

      Logger.log(columnAValues); // コンソールログに変更

      let formattedValues = [];
      columnAValues.forEach(element => {
        // フォーマットされたJIRAのURLを作成
        let formattedValue = "https://skyarchjsm.atlassian.net/browse/" + element + "\n\n";
        formattedValues.push(formattedValue);
      });

      // メールスレッドからメッセージを取得し、通知を処理
      let messages = GmailApp.getMessages(threads);
      let notifiedMessages = []; // 通知済みのメッセージを追跡するための配列
      for (let i = 0; i < messages.length; i++) {
        let subject = messages[i][i].getSubject();
        if (notifiedSubjects.indexOf(subject) === -1 && notifiedMessages.indexOf(subject) === -1) {
          // Slackメッセージの内容を作成
          let message = "▼以下の件名のメールが届いています。\n\n" + subject + "\n\n" + "\n\n" + "▼対象のチケットはこちらかも\n\n" + formattedValues.join("");
          let slackUrl = "https://hooks.slack.com/services/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";
          let payload = {
            "text": message
          };
          let options = {
            "method": "post",
            "payload": JSON.stringify(payload)
          };
          UrlFetchApp.fetch(slackUrl, options);
          mailSheet.appendRow([subject, new Date()]); // 通知したメールの件名と日時を記録
          notifiedMessages.push(subject); // 通知済みメッセージとして追加
        }
      }
    }
  }
}
